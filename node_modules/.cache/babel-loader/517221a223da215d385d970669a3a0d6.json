{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/jonathandennis/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,QAKQ,gBALR;AAOA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACjCC,EAAAA,IAAI,EAAEN,mBAD2B;AAEjCO,EAAAA,OAAO,EAAEF;AAFwB,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAIC,QAAD,IAAc;AACvCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL,sBAAR;AAAgCM,IAAAA,OAAO,EAAEO;AAAzC,GAAD,CAF1B,EAGKC,KAHL,CAGWC,KAAK,IAAIP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,qBAAR;AAA+BI,IAAAA,OAAO,EAAES;AAAxC,GAAD,CAH5B;AAIH,CANM","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants.js';\n\nexport const setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n})\n\nexport const requestRobots = (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_PENDING, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}"]},"metadata":{},"sourceType":"module"}